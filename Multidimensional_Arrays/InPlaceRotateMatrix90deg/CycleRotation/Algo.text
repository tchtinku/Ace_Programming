Here we will divide our matrix in cycles. For example, a 4*4 cycle will have 2 cycles. The first cycle is formed by its 1st row, 
last column, last row and 1st column. The second cycle is formed by 2nd row, second-last column, second-last row and
2nd column. The idea is for each square cycle, swap the elements involved with the corresponding cell in the matrix in
an anti-clockwise direction -- that is, from top to left, left to bottom, bottom to right and from right to top one at
a time using nothing but a temporary variable to achieve this.

steps
1. There are N/2 cycles in a matrix of size N.

2. We traverse in the matrix from the outermost cycle -- that is, (0, 0) to the innermost cycle -- that is,
((N/2) - 1, (N/2)-1).

3. For each cycle, we'll swap elements of the matrix in a group of four elements -- that is, for each 
i<=j<N-i-1 for each 0<=i<=(N/2) - 1 we swap:
a. ARR[i][j] with ARR[j, N-1-i]
b. ARR[j, N-1-i] with ARR[N-1-i, N-1-j]
c. ARR[N-1-i, N-1-j] with ARR[N-1-j, i]
d. ARR[N-1-j, i] with ARR[i][j]

4. At the end of these loops, we will get a rotated matrix.

5. Print the matrix.

Time Complexity: O(N^2), where N*N is the dimension of the matrix. Since only a single traversal of the matrix is needed
the TC is O(N^2).

Space Complexity: O(1) as a constant space is needed because we are doing an in-place rotation.

--------------------------------------------------------

algorithm: Rotate a Square Matrix (N*N) 90 degrees Anti-clockwise using cycles

1. Identify the cycles:
   -> A square matrix of size N*N has N/2 cycles.
   -> Each cycles is formed by the outermost elements of the matrix, progressively moving inward.

2. Outer to Inner Cycle traversal:
   -> Traverse the matrix from the outermost cycle to the innermost cycle.
   -> For each cycle, swap elements in groups of four.

3. Swapping Elements in Each Cycle
   -> For each element i, j in the current cycle, swap:
      => ARR[i][j] with ARR[j][N-1-i]
      => ARR[j][N-1-i] with ARR[N-1-i][N-1-j]
      => ARR[N-1-i][N-1-j] with ARR[N-1-j][i]
      => ARR[N-1-j][i] with ARR[i][j]

4. Repeat until all cycles are processed
   -> Continue for all 0<=i<=N/2-1.

5. Print the matrix:
   -> After processing all cycles, the matrix will be rotated 90 degrees anti-clockwise.