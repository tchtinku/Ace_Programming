We will just iterate through encrypted string S and we will create a decrypted string. Initially, take
an empty decrypted string. Then decompress the string and its frequency one by one and append the current
substring in the decrypted string by its frequency. Repeat the process till the end of the string and print 
the Kth character from the decrypted string.

Steps:

1. We will find the substring by traversing the string until no digit is found.

2. Then found the frequency of the preceding substring by traversing the string until no lowercase
alphabet is found. We can use this relation to create the integer frequency from the string.

This will tell us how many times the string will be repeated in the decompressed string.
                freqOfSubstring = freqOfSubstring * 10 + (S[j] - '0')

    a. Suppose we need to find the frequency of 'cd' in 'cd231a2'. We will traverse 'cd231a2', beginning
       from '2' until no lowercase alphabet is found while applying the above formula.

    b. In the first iteration, freqOfSubstring will be zero, and s[j] = '2'. Now, 
                     frequencyOfSubstring = 0*10 + ('2' - '0')
                     frequencyOfSubstring = 0*10 + 2
                     frequencyOfSubstring = 2

    c. In the second iteration, freqOfSubstring is 2, and s[j]='3'
                     frequencyOfSubstring = 2*10+('3'-'0')
                     frequencyOfSubstring = 2*10+3
                     frequencyOfSubstring = 23

    d. In the third iteration, freqOfSubstring will be 23, and s[j]='1'.
                     frequencyOfSubstring = 23*10 + ('1'-'0')
                     frequencyOfSubstring = 23*10 + 1
                     frequencyOfSubstring = 231

    e. Finally, frequencyOfSubstring = 231. After last iteration, character 'a' is found, thus 
       terminating our loop.

3. We will append the substring freqOfSubstring times in the decrypted string.
4. We will keep repeating the above process until the whole string S is traversed.
5. Finally, we have our decrypted string. Print the (K-1)th index of the decrypted string.

Time Complexity: O(N), where N is the length of the decrypted string corresponding to the encrypted string S.

Space Complexity: O(N), where N = length of the decrypted string corresponding to the encrypted string S.

------------------------------------------------------------

Input: Encrypted string S and integer K.
Output: The K-th character of the decrypted string.

1. Initialize an empty string decrypted_string to store the decompressed string.

2. Iterate through the string S:
      -> Identify substrings containing only lowercase alphabets.
      -> Identify the frequency of the substring (digits following the substring).
      -> Append the substring freq_of_substring times to decrypted_string.

3. Repeat until the entire string S is processed.

4. Return the (K-1)th character from decrypted_string.