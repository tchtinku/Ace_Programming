In this approach, we will use the concept of a sliding window.

Steps

1. Consider n = number of characters in given string str and m = number of characters in the given
string ptr.

2. We use array strMap to store the frequency of characters in str and ptrMap to store the 
frequency of characters in ptr.

3. The initial size of strMap and ptrMap is 26 and the value is '0'.

4. To make the frequency map, we simply increment the value at index '0' of the map if we encounter
'A' in our string. Similarly, we increment the vallue at index '1' by one if we encounter 'B' in 
our string.

5. Iterate i from 0 to n - 1 on string str. The value of strMap[0] will be incremented by one, if the
character at str[i] is 'A', similarly the value of strMap[1] will increase by one if the character at 
str[i] is 'B'. Once the iteration over str is complete, our frequency map strMap will be ready.

6. Follow the same procedure to create ptrMap from the string ptr.

7. Check if strMap and ptrMap are same or not If both are same, then add '0' in the answer
sequence in which we are storing all the starting indices of the anagram.

8. Now iterate i from m to n-1.

9. In strMap, decrease the value of str[i-m] and increase str[i] by one.

10. In every iteration, check if strMap and ptrMap are same or not. If they are same, then add 
i - m + 1 in the answer sequence.

11. Finally, return the answer sequence.

Time Complexity: O(N), N = number of characters in the given string str. A single iteration
through the sequence is required.

Space Complexity: O(K), K = size of our answer sequence. In this approach, the answer sequence
is a sequence in which we store all the starting indices which are anagrams

---------------------------------------------

1. Input & Initialisation:
   -> Take inputs for str and ptr.
   -> Initialise two frequency maps, strMap and ptrMap, of size 26 (for each alphabet letter)
      and set all values to 0.
   -> Initialise result as an empty list to store the starting indices of anagram.

2. Build frequency Map for ptr
     -> Iterate through each character in ptr and update its frequency in ptrMap

3. Initial Window Setup:
   -> Iterate through the first m characters of str (where m = len(ptr)) and update their 
      frequencies in strMap.

4. Check Initial Window:
   -> Compare strMap and ptrMap. If they are the same, add 0 to the result.

5. Sliding Window:
   -> Loop through the remaining characters of str starting from index m
      => Decrement the frequency of the character leaving the window (str[i-m])
      => Increment the frequency of the character entering the window (str[i])
      => Compare strMap and ptrMap. If they match, add the starting index of the current 
       window (i-m+1) to result.

6. Return Results
   -> Return the result list containing all starting indices of anagrams