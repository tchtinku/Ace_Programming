1. Start
2. Input: Rotated sorted array arr and value target
3. Initialize: start=0, end = len(arr)-1.
4. Calculate: mid = (start+end) // 2
5. Check:
   -> If arr[mid] == target, print mid & end.
6. Left Sorted Check:
   -> If arr[start] <= arr[mid]:
       => If target in range arr[start] to arr[mid], update end=mid-1
       => Else, update start = mid+1
7. Right Sorted Check:
   -> Else: 
        => If target in range arr[mid] to arr[end], update start = mid+1.
        => Else, update end=mid-1
8. Repeat Steps 4-7 Until start>end.
9. Print -1 (target not found).
10. End

---------

Time Complexity: O(log(N))
   -> The array is divided into halves at each step.

Space Complexity: O(1)
   -> Only constant space is used.

------------

Example
Input:
Enter the rotated sorted array elements (space-seaparated):
4 5 6 7 0 1 2
Enter the value to search
6

Output:
Element 6 found at index 2

-------

Input:
Enter the rotated sorted array elements (space-seaparated):
4 5 6 7 0 1 2
Enter the value to search
3

Output:
Element 3 not found in the array