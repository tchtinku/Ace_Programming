1. Iterate over the intervals one by one.
2. For every interval, check if the end value of one interval is less than the start value of the other interval
3. If this Condition fails, the intervals are overlapping. Therefore return false.
4. Otherwise return true

Time Complexity: O(N^2), where N=total number of intervals

For every interval we check the remaining (N-i-1) intervals where i=current interval. Thus we would end up with quadratic complexity

Space Complexity: Since we don't use any extra space.

---------------------

1. Input: List of intervals
2. Iterate through Intervals:
   -> For each interval i, iterate through all remaining intervals j such that j>i
   -> Check if intervals[i] and intervals[j] overlap using the condition:
      => if not (intervals[i][1] < intervals[j][0] or intervals[j][1]<intervals[i][0])
   -> If they overlap, return false.
3. Return: If all pairs of intervals are checked without finding an overlap, return True

Time Complexity: O(N^2)
  -> For each interval, N-i-1 comparisons are made, resulting in a quadratic complexity.

Space Complexity: O(1)
  -> No additional space is used


Example-1: 
   Input: Enter the number of intervals: 3
   Enter each interval as start and end values (space-separated):
   1  3
   5  6
   7  9

Output: The intervals are non-overlapping


Example-2: 
   Input: Enter the number of intervals: 3
   Enter each interval as start and end values (space-separated):
   1  5
   4  6
   7  9

Output: The intervals are overlapping