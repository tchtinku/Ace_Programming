1. Instead of creating a new infinite array B which has a repeated array A elements in the form
[A1, A2,...An, A1, A2,....An, A1, A2,....An], we will traverse array A from start to end repetitively.
This means that when we reach An, we will go back to A1 and start our traversal again

2. Therefore, using the brute force approach, we follow the following steps:
   -> We run a loop from L to R.
   -> For each  index i, we add the value at index i%N of the array A -- i.e, A[i%N] to our sum.
   -> This way, we find the sum of the required subarray from index L to R in an infinite array B.


Dry Run: 
A = [1, 2, 3]
L = 1
R = 3
N = 3

sum = A[1%3] + A[2%3] + A[3%3]
    = 2 + 3 + 1
    = 6

Time Complexity: In the worst case, we will be running a loop from L to R that takes (O(R-L)) time.
Thus a total of O(R-L) time will be required.

Space Complexity: O(1), as in the worst case, only a constant space is required


------------------------------------------------------

1. Initialise the array A and the indices L and R where L=<R.
2. Initialise total_sum as 0 to keep track of the cumulative sum of values between indices L and R in the infinite array.
3. Loop from L to R:
   -> For each index i, compute A[i%N] to get the value in the infinite array that corresponds to A[i%N].
   -> Add this value to total_sum
4. Return total_sum as the final answer
